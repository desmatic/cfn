#################
# Author:      Des Jones (des@bitboffins.io)
# Project:     DC automation
# Date:        Thu 13 Oct 16:35:45 BST 2022
# Version:     1.01
# Git:         https://github.com/desmatic/cfn
###################################################

AWSTemplateFormatVersion: 2010-09-09
Description: amzn2 datastore dc-aws-1.01

Parameters:
  DefaultEC2ServerSecurityGroupID:
    Type: AWS::EC2::SecurityGroup::Id
    Description: Default security group to add LDAP support to.
  BastionEC2ServerSecurityGroupID:
    Type: AWS::EC2::SecurityGroup::Id
    Description: Administrative security group to add access from.
  ServerHostname:
    Description: Hostname for server (not FQDN)
    Type: String
  CreatedBy:
    Default: desjones
    Description: Resource name for tagging resources
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9-]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  OwnerName:
    Default: devops
    Description: Resource owners name for tagging resources
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9-]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DataCenter:
    Description: Datacenter name for tagging resources
    Type: String
    AllowedValues:
      - eu1aws
      - eu2aws
  KeyPairName:
    Type: 'AWS::EC2::KeyPair::KeyName'
    Description: The name of an existing Amazon EC2 key pair in the region where the project is created, which you can use to SSH into the new Amazon EC2 Linux instances.
    Default: devops
  PortService:
    Default: '5432'
    Description: Service port number for requests
    Type: Number
    MinValue: '1'
    MaxValue: '65535'
    ConstraintDescription: must be between 1 and 65535.
  PortServiceUI:
    Default: '80'
    Description: Service port number for requests
    Type: Number
    MinValue: '1'
    MaxValue: '65535'
    ConstraintDescription: must be between 1 and 65535.
  ServiceNetwork:
    Description: The IP address range that can be used to access the service
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 10.0.0.0/8
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    AllowedValues:
      - /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-ebs
      - /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
      - /aws/service/ami-amazon-linux-latest/amzn2-ami-minimal-hvm-x86_64-ebs
      - /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id
      - /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-arm64-gp2
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
  EC2InstanceType:
    Type: String
    Description: The type of Amazon EC2 Linux instances that will be launched for this project.
    AllowedValues:
      - t3.small
      - t3.medium
      - t3.large
      - m5.large
      - r5.large
      - r5.xlarge
    Default: m5.large
  EC2ServerCapacityAZ1:
    Default: '1'
    Description: The initial number of EC2Server instances
    Type: Number
    MinValue: '0'
    MaxValue: '8'
    ConstraintDescription: must be between 1 and 5 EC2 instances.
  EC2ServerCapacityAZ2:
    Default: '0'
    Description: The initial number of EC2Server instances
    Type: Number
    MinValue: '0'
    MaxValue: '8'
    ConstraintDescription: must be between 1 and 5 EC2 instances.
  DiskSize:
    Default: '12'
    Description: Disk volume in gigabytes
    Type: Number
    MinValue: '12'
    MaxValue: '3335'
    ConstraintDescription: must be between 12 and 3335.
  DiskSizeData:
    Default: '8'
    Description: Disk volume in gigabytes
    Type: Number
    MinValue: '8'
    MaxValue: '3335'
  HostedZoneName:
    Description: DNS Hosted Zone Name
    Type: String
    AllowedValues:
      - eu1aws.localdomain.net
      - eu2aws.localdomain.net
  HostedZoneID:
    Description: DNS Hosted Zone ID
    Type: 'AWS::Route53::HostedZone::Id'
  AvailabilityZones:
    Type: 'List<AWS::EC2::AvailabilityZone::Name>'
    Description: List of Availability Zones in your Virtual Private Cloud (two required)
    ConstraintDescription: >-
      must be a list of at least two existing availability zones associated with the
      subnets selected below. They should be residing in the selected
      Virtual Private Cloud.
  Subnets:
    Type: 'List<AWS::EC2::Subnet::Id>'
    Description: The list of SubnetIds in your Virtual Private Cloud (two required)
    ConstraintDescription: >-
      must be a list of at least two existing subnets associated with at least
      two different availability zones. They should be residing in the selected
      Virtual Private Cloud.
  VpcId:
    Type: 'AWS::EC2::VPC::Id'
    Description: The ID of the Amazon Virtual Private Cloud (VPC) to use for Amazon EC2 instances.
    
Conditions:
  HasPowerOff:
    !Not [!Equals [!Ref PowerOff, never]]

Resources:
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
            - ssm.amazonaws.com
          Action:
          - sts:AssumeRole
  InstancePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action:
          - s3:*
          - ec2:*
          - autoscaling:Describe*
          - autoscaling:DetachInstances
          - autoscaling:EnterStandby
          - autoscaling:ExitStandby
          - autoscaling:SetInstanceProtection
          - autoscaling:SuspendProcesses
          - ssm:GetParameters
          - kms:Decrypt
          - kms:DescribeKey
          - sns:Publish
          Resource:
          - "*"
        - Effect: Allow
          Action:
          - iam:PassRole
          Resource: "*"
      Roles:
      - Ref: InstanceRole
      PolicyName: !Ref AWS::StackName
    DependsOn: InstanceRole
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: InstanceRole
    DependsOn: InstancePolicy
  EC2ServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable service port and SSH access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref ServiceNetwork
        - IpProtocol: tcp
          FromPort: !Ref PortService
          ToPort: !Ref PortService
          CidrIp: !Ref ServiceNetwork
        - IpProtocol: tcp
          FromPort: !Ref PortServiceUI
          ToPort: !Ref PortServiceUI
          CidrIp: !Ref ServiceNetwork
      Tags:
        - Key: Name
          Value: !Join
          - '-'
          - - !Ref AWS::StackName
        - Key: base-stack-name
          Value: !Ref AWS::StackName
        - Key: base-stack-id
          Value: !Ref AWS::StackId
        - Key: createdby
          Value: !Ref CreatedBy
        - Key: owner
          Value: !Ref OwnerName
        - Key: datacenter
          Value: !Ref DataCenter
        - Key: service
          Value: sg
      VpcId: !Ref VpcId
  EC2ServerSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: -1
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId:
        Fn::GetAtt:
        - EC2ServerSecurityGroup
        - GroupId
      GroupId:
        Fn::GetAtt:
        - EC2ServerSecurityGroup
        - GroupId
  EC2ServerSecurityGroupIngressPortService:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      FromPort: !Ref PortService
      ToPort: !Ref PortService
      GroupId: !Ref EC2ServerSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref DefaultEC2ServerSecurityGroupID
  EC2ServerSecurityGroupIngressPortBastion:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      FromPort: 22
      ToPort: 22
      GroupId: !Ref EC2ServerSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref BastionEC2ServerSecurityGroupID
  ENI1:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: Network Interface 1
      SourceDestCheck: 'false'
      SecondaryPrivateIpAddressCount: 1
      GroupSet:
        - Fn::GetAtt:
          - EC2ServerSecurityGroup
          - GroupId
      SubnetId: !Select [ 0, !Ref Subnets ]
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref AWS::StackName
              - '1'
        - Key: base-stack-name
          Value: !Ref AWS::StackName
        - Key: base-stack-id
          Value: !Ref AWS::StackId
        - Key: createdby
          Value: !Ref CreatedBy
        - Key: owner
          Value: !Ref OwnerName
        - Key: datacenter
          Value: !Ref DataCenter
        - Key: service
          Value: eni
    DependsOn: EC2ServerSecurityGroup
  ENI1DNS:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref HostedZoneID
      RecordSets:
        - Name: !Sub '${ServerHostname}1.${HostedZoneName}.'
          Type: A
          TTL: 60
          ResourceRecords:
            - !Select
              - '0'
              - !GetAtt
                - ENI1
                - SecondaryPrivateIpAddresses
    DependsOn: ENI1
  Volume1:
    Type: AWS::EC2::Volume
    Properties:
      Size: !Ref DiskSizeData
      Encrypted: true
      VolumeType: gp3
      AvailabilityZone: !Select [ 0, !Ref AvailabilityZones ]
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref AWS::StackName
              - '1'
        - Key: base-stack-name
          Value: !Ref AWS::StackName
        - Key: base-stack-id
          Value: !Ref AWS::StackId
        - Key: createdby
          Value: !Ref CreatedBy
        - Key: owner
          Value: !Ref OwnerName
        - Key: datacenter
          Value: !Ref DataCenter
        - Key: service
          Value: postgres
    DeletionPolicy: Snapshot
  ENI2:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: Network Interface 2
      SourceDestCheck: 'false'
      SecondaryPrivateIpAddressCount: 1
      GroupSet:
        - Fn::GetAtt:
          - EC2ServerSecurityGroup
          - GroupId
      SubnetId: !Select [ 1, !Ref Subnets ]
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref AWS::StackName
              - '2'
        - Key: base-stack-name
          Value: !Ref AWS::StackName
        - Key: base-stack-id
          Value: !Ref AWS::StackId
        - Key: createdby
          Value: !Ref CreatedBy
        - Key: owner
          Value: !Ref OwnerName
        - Key: datacenter
          Value: !Ref DataCenter
        - Key: service
          Value: postgres
    DependsOn: EC2ServerSecurityGroup
  ENI2DNS:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref HostedZoneID
      RecordSets:
        - Name: !Sub '${ServerHostname}2.${HostedZoneName}.'
          Type: A
          TTL: 60
          ResourceRecords:
            - !Select
              - '0'
              - !GetAtt
                - ENI2
                - SecondaryPrivateIpAddresses
    DependsOn: ENI2
  Volume2:
    Type: AWS::EC2::Volume
    Properties:
      Size: !Ref DiskSizeData
      Encrypted: true
      VolumeType: gp3
      AvailabilityZone: !Select [ 1, !Ref AvailabilityZones ]
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref AWS::StackName
              - '2'
        - Key: base-stack-name
          Value: !Ref AWS::StackName
        - Key: base-stack-id
          Value: !Ref AWS::StackId
        - Key: createdby
          Value: !Ref CreatedBy
        - Key: owner
          Value: !Ref OwnerName
        - Key: datacenter
          Value: !Ref DataCenter
        - Key: service
          Value: postgres
    DeletionPolicy: Snapshot
  EC2PlacementGroup:
    Type: AWS::EC2::PlacementGroup
    Properties:
      Strategy: spread
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Metadata:
      Comment1: Configure the bootstrap helpers
      'AWS::CloudFormation::Init':
        config:
          files:
            /root/sethostname.sh:
              content: !Join
                - ''
                - - |
                    #!/bin/bash -xe
                  - |
                  - NEW_HOSTNAME=
                  - !Ref ServerHostname
                  - |+

                  - |
                    HOSTIP=$(ip route get 8.8.8.8 | awk '{ for (nn=1;nn<=NF;nn++) if ($nn~"src") print $(nn+1) }')
                    CURRENT_HOSTNAME=$(hostname | cut -d '.' -f1)
                    DOMAINNAME=$(hostname --fqdn | cut -d '.' -f2-10)
                    FQDN="${NEW_HOSTNAME}.${DOMAINNAME}"

                    # update hosts file
                    HOSTS="${HOSTIP} ${FQDN} ${NEW_HOSTNAME}"
                    if egrep -qa "^[ ]*${HOSTIP}" /etc/hosts; then
                        sed -i "s/^[ ]*${HOSTIP}.*$/${HOSTS}/" /etc/hosts
                    else
                        echo "${HOSTS}" >> /etc/hosts
                    fi

                    # update hosts file template
                    if [ -f /etc/cloud/templates/hosts.redhat.tmpl ]; then
                        if egrep -qa "${HOSTIP}" /etc/cloud/templates/hosts.redhat.tmpl; then
                            sed -i "s/^[ ]*${HOSTIP}.*$/${HOSTS}/" /etc/cloud/templates/hosts.redhat.tmpl
                        else
                            echo -e "# local-set-hostname\n${HOSTS}" >> /etc/cloud/templates/hosts.redhat.tmpl
                        fi
                    fi

                    # set hostname
                    if [ ! -z "${NEW_HOSTNAME}" ] && [ ${NEW_HOSTNAME} != ${CURRENT_HOSTNAME} ]; then
                        # update system
                        if command -v hostnamectl >/dev/null; then
                            hostnamectl set-hostname ${NEW_HOSTNAME}
                        else
                            sed -i "s/^[ ]*HOSTNAME[ ]*=.*$/HOSTNAME=${NEW_HOSTNAME}/" /etc/sysconfig/network
                            hostname ${NEW_HOSTNAME}
                            service network restart
                        fi
                    fi

              mode: '000755'
              owner: root
              group: root
            /usr/local/sbin/attach-db.sh:
              content: !Join
                - ''
                - - |
                    #!/bin/bash -xe
                    if [[ $EUID -ne 0 ]]; then
                      echo "This script must be run as root"
                      exit 1
                    fi
                    if [[ -z ${1} ]]; then
                      echo "Oops, no mount directory specified"
                      exit 1
                    fi
                  - |
                  - AWS_REGION=
                  - !Ref 'AWS::Region'
                  - |+

                  - ENI1=
                  - !Ref ENI1
                  - |+

                  - ENI2=
                  - !Ref ENI2
                  - |+

                  - VOLUMEID1=
                  - !Ref Volume1
                  - |+

                  - VOLUMEID2=
                  - !Ref Volume2
                  - |+

                  - |
                    # Set env variables
                    AWS_AVAIL_ZONE=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone)
                    AWS_INSTANCEID=$(curl --silent http://169.254.169.254/latest/meta-data/instance-id)
                    VOLUMES="${VOLUMEID1} ${VOLUMEID2}"
                    INTERFACES="${ENI1} ${ENI2}"
                    VOLUMEID=$(aws ec2 describe-volumes --region=${AWS_REGION} --volume-ids ${VOLUMES} --filter Name=availability-zone,Values=${AWS_AVAIL_ZONE} --query "Volumes[].VolumeId" --out text)
                    INTERFACEID=$(aws ec2 describe-network-interfaces --region=${AWS_REGION} --network-interface-ids ${INTERFACES} --filter Name=availability-zone,Values=${AWS_AVAIL_ZONE} --query "NetworkInterfaces[].NetworkInterfaceId" --out text)
                    if [ ! -z "${VOLUMEID}" ] && [ ! -z "${INTERFACEID}" ]; then
                      mkdir -p ${1}
                      if ! egrep -qa "^[ ]*/dev/nvme1n1" /etc/fstab; then
                        echo "/dev/nvme1n1   ${1}       xfs     defaults,nobarrier,noatime,nodiratime  0   0" >> /etc/fstab
                      fi
                      for i in 1 2 3; do
                        VOLUME_STATE=$(aws ec2 describe-volumes --region=${AWS_REGION} --volume-ids ${VOLUMEID} --query "Volumes[].State" --out text)
                        INTERFACE_STATE=$(aws ec2 describe-network-interfaces --region=${AWS_REGION} --network-interface-ids ${INTERFACEID} --query "NetworkInterfaces[].Status" --out text)
                        if [ $VOLUME_STATE == "available" ] && [ $INTERFACE_STATE == "available" ]; then
                          if aws ec2 attach-volume --region=${AWS_REGION} --volume-id ${VOLUMEID} --instance-id ${AWS_INSTANCEID} --device /dev/xvdb; then
                            # wait for kernel to register volume
                            for j in 2 1 1 2 5 6 7 8 9; do
                              if [ -b /dev/nvme1n1 ]; then
                                if ! blkid /dev/nvme1n1 && mkfs.xfs /dev/nvme1n1; then
                                  echo "successfully formated mount volume"
                                fi
                                egrep -q '^/dev/nvme1n1\s*${1}' /proc/mounts || mount ${1}
                                aws ec2 attach-network-interface --region=${AWS_REGION} --network-interface-id ${INTERFACEID} --instance-id ${AWS_INSTANCEID} --device-index 1
                                exit 0
                              fi
                              echo "waiting for kernel to register ${VOLUMEID}, sleeping $j seconds"
                              sleep $j
                            done
                          fi
                        fi
                        echo "${VOLUMEID} ${VOLUME_STATE} sleeping 15 seconds"
                        sleep 15
                      done
                    fi
              mode: '000755'
              owner: root
              group: root
            /etc/cfn/cfn-hup.conf:
              content: !Join
                - ''
                - - |
                    [main]
                  - stack=
                  - !Ref 'AWS::StackId'
                  - |+

                  - region=
                  - !Ref 'AWS::Region'
                  - |+
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Join
                - ''
                - - |
                    [cfn-auto-reloader-hook]
                  - |
                    triggers=post.update
                  - >
                    path=Resources.LaunchTemplate.Metadata.AWS::CloudFormation::Init
                  - 'action=/opt/aws/bin/cfn-init -v '
                  - '         --stack '
                  - !Ref 'AWS::StackName'
                  - '         --resource LaunchTemplate '
                  - '         --region '
                  - !Ref 'AWS::Region'
                  - |+

                  - |
                    runas=root
              mode: '000400'
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
    Properties:
      LaunchTemplateName: !Ref AWS::StackName
      LaunchTemplateData:
        InstanceType: !Ref EC2InstanceType
        KeyName: !Ref KeyPairName
        ImageId: !Ref LatestAmiId
        EbsOptimized: true
        IamInstanceProfile:
          Arn:
            Fn::GetAtt:
            - InstanceProfile
            - Arn
        SecurityGroupIds:
          - !Ref EC2ServerSecurityGroup
        BlockDeviceMappings:
          - DeviceName: "/dev/xvda"
            Ebs:
              VolumeSize: !Ref DiskSize
              VolumeType: gp3
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Join
                - '-'
                - - !Ref AWS::StackName
              - Key: base-stack-name
                Value: !Ref AWS::StackName
              - Key: base-stack-id
                Value: !Ref AWS::StackId
              - Key: createdby
                Value: !Ref CreatedBy
              - Key: owner
                Value: !Ref OwnerName
              - Key: datacenter
                Value: !Ref DataCenter
              - Key: service
                Value: postgres
              - Key: node-type
                Value: postgres
              - Key: node-role
                Value: !Ref AWS::StackName
              - Key: ddns
                Value: !Ref ServerHostname
              - Key: round-robin
                Value: true
          - ResourceType: volume
            Tags:
              - Key: Name
                Value: !Join
                - '-'
                - - !Ref AWS::StackName
              - Key: base-stack-name
                Value: !Ref AWS::StackName
              - Key: base-stack-id
                Value: !Ref AWS::StackId
              - Key: createdby
                Value: !Ref CreatedBy
              - Key: owner
                Value: !Ref OwnerName
              - Key: datacenter
                Value: !Ref DataCenter
              - Key: service
                Value: postgres
              - Key: node-type
                Value: postgres
              - Key: node-role
                Value: !Ref AWS::StackName
        UserData: !Base64
          'Fn::Join':
            - ''
            - - |
                #!/bin/bash -xe
              - |
              - AWS_REGION=
              - !Ref 'AWS::Region'
              - |+

              - AWS_STACK_NAME=
              - !Ref 'AWS::StackName'
              - |+

              - |
                # Install rpms
                yum remove -y rpm-plugin-systemd-inhibit # this thing is really annoying
                yum update -y
                amazon-linux-extras install -y epel
                yum install -y amazon-efs-utils aws-cfn-bootstrap awscli curl jq pwgen

              - |
                # Install the files and packages from the metadata
              - '/opt/aws/bin/cfn-init -v '
              - '         --stack '
              - !Ref 'AWS::StackName'
              - '         --resource LaunchTemplate '
              - '         --region '
              - !Ref 'AWS::Region'
              - |+

              - |
                # Set hostname
                /root/sethostname.sh

                # Mount volume and attach network
                # /usr/local/sbin/attach-db.sh "/var/lib/disk/"

              - |+
    DependsOn:
      - InstanceProfile
  EC2AutoScalingGroup1:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      MinSize: '0'
      MaxSize: '5'
      DesiredCapacity: !Ref EC2ServerCapacityAZ1
      VPCZoneIdentifier:
        - !Select [ 0, !Ref Subnets ]
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version:
          Fn::GetAtt:
            - LaunchTemplate
            - LatestVersionNumber
      PlacementGroup: !Ref EC2PlacementGroup
      HealthCheckType: EC2
      HealthCheckGracePeriod: 300
      TerminationPolicies:
        - OldestLaunchConfiguration
        - OldestLaunchTemplate
        - OldestInstance
  EC2AutoScalingGroup2:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      MinSize: '0'
      MaxSize: '5'
      DesiredCapacity: !Ref EC2ServerCapacityAZ2
      VPCZoneIdentifier:
        - !Select [ 1, !Ref Subnets ]
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version:
          Fn::GetAtt:
            - LaunchTemplate
            - LatestVersionNumber
      PlacementGroup: !Ref EC2PlacementGroup
      HealthCheckType: EC2
      HealthCheckGracePeriod: 300
      TerminationPolicies:
        - OldestLaunchConfiguration
        - OldestLaunchTemplate
        - OldestInstance

Outputs:
  EC2ServerSecurityGroup:
    Description: EC2 instances security group
    Value: !Ref EC2ServerSecurityGroup
